#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVCHelloWorld.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Run")]
	public partial class runDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActivity(Activity instance);
    partial void UpdateActivity(Activity instance);
    partial void DeleteActivity(Activity instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertSport(Sport instance);
    partial void UpdateSport(Sport instance);
    partial void DeleteSport(Sport instance);
    #endregion
		
		public runDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["RunConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public runDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public runDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public runDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public runDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Activity> Activities
		{
			get
			{
				return this.GetTable<Activity>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<Sport> Sports
		{
			get
			{
				return this.GetTable<Sport>();
			}
		}
	}
	
	[Table(Name="dbo.Activity")]
	public partial class Activity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _activityid;
		
		private System.Nullable<int> _personid;
		
		private System.Nullable<System.DateTime> _date;
		
		private System.Nullable<int> _sportid;
		
		private string _description;
		
		private System.Nullable<double> _kilometres;
		
		private System.Nullable<double> _hours;
		
		private string _comment;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Sport> _Sport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnactivityidChanging(int value);
    partial void OnactivityidChanged();
    partial void OnpersonidChanging(System.Nullable<int> value);
    partial void OnpersonidChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OnsportidChanging(System.Nullable<int> value);
    partial void OnsportidChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnkilometresChanging(System.Nullable<double> value);
    partial void OnkilometresChanged();
    partial void OnhoursChanging(System.Nullable<double> value);
    partial void OnhoursChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    #endregion
		
		public Activity()
		{
			this._Person = default(EntityRef<Person>);
			this._Sport = default(EntityRef<Sport>);
			OnCreated();
		}
		
		[Column(Storage="_activityid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int activityid
		{
			get
			{
				return this._activityid;
			}
			set
			{
				if ((this._activityid != value))
				{
					this.OnactivityidChanging(value);
					this.SendPropertyChanging();
					this._activityid = value;
					this.SendPropertyChanged("activityid");
					this.OnactivityidChanged();
				}
			}
		}
		
		[Column(Storage="_personid", DbType="Int")]
		public System.Nullable<int> personid
		{
			get
			{
				return this._personid;
			}
			set
			{
				if ((this._personid != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpersonidChanging(value);
					this.SendPropertyChanging();
					this._personid = value;
					this.SendPropertyChanged("personid");
					this.OnpersonidChanged();
				}
			}
		}
		
		[Column(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[Column(Storage="_sportid", DbType="Int")]
		public System.Nullable<int> sportid
		{
			get
			{
				return this._sportid;
			}
			set
			{
				if ((this._sportid != value))
				{
					if (this._Sport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsportidChanging(value);
					this.SendPropertyChanging();
					this._sportid = value;
					this.SendPropertyChanged("sportid");
					this.OnsportidChanged();
				}
			}
		}
		
		[Column(Storage="_description", DbType="NVarChar(255)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_kilometres", DbType="Float")]
		public System.Nullable<double> kilometres
		{
			get
			{
				return this._kilometres;
			}
			set
			{
				if ((this._kilometres != value))
				{
					this.OnkilometresChanging(value);
					this.SendPropertyChanging();
					this._kilometres = value;
					this.SendPropertyChanged("kilometres");
					this.OnkilometresChanged();
				}
			}
		}
		
		[Column(Storage="_hours", DbType="Float")]
		public System.Nullable<double> hours
		{
			get
			{
				return this._hours;
			}
			set
			{
				if ((this._hours != value))
				{
					this.OnhoursChanging(value);
					this.SendPropertyChanging();
					this._hours = value;
					this.SendPropertyChanged("hours");
					this.OnhoursChanged();
				}
			}
		}
		
		[Column(Storage="_comment", DbType="NVarChar(512)")]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[Association(Name="Person_Activity", Storage="_Person", ThisKey="personid", OtherKey="personid", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Activities.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Activities.Add(this);
						this._personid = value.personid;
					}
					else
					{
						this._personid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[Association(Name="Sport_Activity", Storage="_Sport", ThisKey="sportid", OtherKey="sportid", IsForeignKey=true)]
		public Sport Sport
		{
			get
			{
				return this._Sport.Entity;
			}
			set
			{
				Sport previousValue = this._Sport.Entity;
				if (((previousValue != value) 
							|| (this._Sport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sport.Entity = null;
						previousValue.Activities.Remove(this);
					}
					this._Sport.Entity = value;
					if ((value != null))
					{
						value.Activities.Add(this);
						this._sportid = value.sportid;
					}
					else
					{
						this._sportid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Sport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _personid;
		
		private string _personname;
		
		private EntitySet<Activity> _Activities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpersonidChanging(int value);
    partial void OnpersonidChanged();
    partial void OnpersonnameChanging(string value);
    partial void OnpersonnameChanged();
    #endregion
		
		public Person()
		{
			this._Activities = new EntitySet<Activity>(new Action<Activity>(this.attach_Activities), new Action<Activity>(this.detach_Activities));
			OnCreated();
		}
		
		[Column(Storage="_personid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int personid
		{
			get
			{
				return this._personid;
			}
			set
			{
				if ((this._personid != value))
				{
					this.OnpersonidChanging(value);
					this.SendPropertyChanging();
					this._personid = value;
					this.SendPropertyChanged("personid");
					this.OnpersonidChanged();
				}
			}
		}
		
		[Column(Storage="_personname", DbType="VarChar(50)")]
		public string personname
		{
			get
			{
				return this._personname;
			}
			set
			{
				if ((this._personname != value))
				{
					this.OnpersonnameChanging(value);
					this.SendPropertyChanging();
					this._personname = value;
					this.SendPropertyChanged("personname");
					this.OnpersonnameChanged();
				}
			}
		}
		
		[Association(Name="Person_Activity", Storage="_Activities", ThisKey="personid", OtherKey="personid")]
		public EntitySet<Activity> Activities
		{
			get
			{
				return this._Activities;
			}
			set
			{
				this._Activities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[Table(Name="dbo.Sport")]
	public partial class Sport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _sportid;
		
		private string _sportname;
		
		private EntitySet<Activity> _Activities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsportidChanging(int value);
    partial void OnsportidChanged();
    partial void OnsportnameChanging(string value);
    partial void OnsportnameChanged();
    #endregion
		
		public Sport()
		{
			this._Activities = new EntitySet<Activity>(new Action<Activity>(this.attach_Activities), new Action<Activity>(this.detach_Activities));
			OnCreated();
		}
		
		[Column(Storage="_sportid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int sportid
		{
			get
			{
				return this._sportid;
			}
			set
			{
				if ((this._sportid != value))
				{
					this.OnsportidChanging(value);
					this.SendPropertyChanging();
					this._sportid = value;
					this.SendPropertyChanged("sportid");
					this.OnsportidChanged();
				}
			}
		}
		
		[Column(Storage="_sportname", DbType="VarChar(255)")]
		public string sportname
		{
			get
			{
				return this._sportname;
			}
			set
			{
				if ((this._sportname != value))
				{
					this.OnsportnameChanging(value);
					this.SendPropertyChanging();
					this._sportname = value;
					this.SendPropertyChanged("sportname");
					this.OnsportnameChanged();
				}
			}
		}
		
		[Association(Name="Sport_Activity", Storage="_Activities", ThisKey="sportid", OtherKey="sportid")]
		public EntitySet<Activity> Activities
		{
			get
			{
				return this._Activities;
			}
			set
			{
				this._Activities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Sport = this;
		}
		
		private void detach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Sport = null;
		}
	}
}
#pragma warning restore 1591
